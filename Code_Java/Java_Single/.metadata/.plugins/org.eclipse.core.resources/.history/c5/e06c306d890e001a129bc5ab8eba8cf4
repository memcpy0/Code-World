import java.util.LinkedList;

class User {
	private int userID;
	public int getUserID() {
		return userID;
	}
	public void setUserID(int userID) {
		this.userID = userID;
	}
	public User(int userID) {
		this.userID = userID;
	}
}

class SynchronizedQueue {
	private LinkedList<User> data = new LinkedList<User>();
	private final int SIZE = 5;
	private int userNumber = 0; // 用户编号
	// 入队返回入队的对象
	public synchronized User offer() {
		// 如果队列已经满了, 让生产者线程等待
		if (data.size() >= SIZE) {
			try {
				System.out.println("队列满，" + Thread.currentThread().getName() + "等待！");
				wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		userNumber++;
		User user = new User(userNumber); // 产生用户
		data.offer(user); // 加入集合尾部
		System.out.println(Thread.currentThread().getName() + "产生数据！");
		if (data.size() >= SIZE) notify();
		return user;  
	}
	// 出队返回出队的对象
	public synchronized User poll() {
		// 如果队列为空, 则让消费者线程等待
		if (data.isEmpty()) {
			try {
				System.out.println("队列空，" + Thread.currentThread().getName() + "等待！");
				wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		User user = data.poll();
		System.out.println(Thread.currentThread().getName() + "取出数据！");
		if (data.isEmpty()) notify();
		return user;
	}
	public int size() { 
		return data.size();
	}
}

class Producer implements Runnable {
	private SynchronizedQueue queue; // 同步队列
	public Producer(SynchronizedQueue queue) {
		this.queue = queue;
	}
	public void run() {
		while (true) {
			int size = queue.size(); // 队列中的用户数
			User user = queue.offer(); // 入队
			System.out.println("您前面有" + size + "人正在等待, 您的编号为：" + user.getUserID());
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
}

class Consumer implements Runnable {
	private SynchronizedQueue queue; // 同步队列
	public Consumer(SynchronizedQueue queue) {
		this.queue = queue;
	}
	public void run() {
		while (true) {
			int size = queue.size(); // 队列中的用户数
			User user = queue.poll(); // 出队
			if (user == null) {
				System.out.println("请" + user.getUserID() + "号客户到" + 
			    Thread.currentThread().getName() + "办理业务");
				System.out.println(Thread.currentThread().getName() + "正在办理" + user.getUserID()
				+ "号客户业务...");
			}
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
}

public class WaitNotifyTest {
	public static void main(String[] args) {
		SynchronizedQueue q = new SynchronizedQueue();
		Producer p = new Producer(q);
		Consumer c = new Consumer(q);
		new Thread(p, "1号抽号机").start();
		new Thread(p, "2号抽号机").start();
		
		new Thread(c, "1号窗口").start();
		new Thread(c, "2号窗口").start();
		new Thread(c, "3号窗口").start();
	}
}

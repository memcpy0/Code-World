import java.util.Queue;
import java.util.LinkedList;
import java.util.ArrayList;

public class GraphBFS {
	private Graph G;
	private boolean[] visited;
	
	private ArrayList<Integer> order = new ArrayList<>(); //广度优先遍历的顺序
	
	public GraphBFS(Graph G) {
		this.G = G;
		visited = new boolean[G.V()];
		
		for (int i = 0; i < G.V(); ++i) 
			if (visited[i] == false) 
				bfs(i);
	}
	
	private void bfs(int s) {
		Queue<Integer> queue = new LinkedList<>(); //Queue不是一个类而是接口,  需要指定具体的实现类,  用链表很合适
		queue.add(s);
		
		while (!queue.isEmpty()) {
			int v = queue.remove();
			order.add(v);
			
			for (int w : G.adj(v)) { //v的相邻顶点
				if (!visited[w]) {
					queue.add(w);
					visited[w] = true;
				}
			}
		}
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}

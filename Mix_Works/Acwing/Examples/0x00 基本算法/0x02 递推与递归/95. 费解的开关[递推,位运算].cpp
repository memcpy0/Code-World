/*
你玩过“拉灯”游戏吗？

25 盏灯排成一个 5×5 的方形。
每一个灯都有一个开关，游戏者可以改变它的状态。每一步，游戏者可以改变某一个灯的状态。
游戏者改变一个灯的状态会产生连锁反应：和这个灯上下左右相邻的灯也要相应地改变其状态。
我们用数字 1 表示一盏开着的灯，用数字 0 表示关着的灯。

下面这种状态

10111
01101
10111
10000
11011

在改变了最左上角的灯的状态后将变成：

01111
11101
10111
10000
11011

再改变它正中间的灯后状态将变成：

01111
11001
11001
10100
11011

给定一些游戏的初始状态，编写程序判断游戏者是否可能在 6 步以内使所有的灯都变亮。

输入格式
第一行输入正整数 n ，代表数据中共有 n 个待解决的游戏初始状态。
以下若干行数据分为 n 组，每组数据有 5 行，每行 5 个字符。
每组数据描述了一个游戏的初始状态。
各组数据间用一个空行分隔。

输出格式
一共输出 n 行数据，每行有一个小于等于 6 的整数，它表示对于输入数据中对应的游戏状态最少需要几步才能使所有灯变亮。

对于某一个游戏初始状态，若 6 步以内无法使所有灯变亮，则输出 −1 。

数据范围
0<n≤500

输入样例：
3
00111
01011
10001
11010
11100

11101
11101
11110
11111
11111

01111
11111
11111
11111
11111

输出样例：

3
2
-1

void bit_clear(int &v, int i, int j) {
	v &= ~(1 << (i * 5 + j));
}
*/
#include <bits/stdc++.h>
using namespace std;
int n, finalState = (1 << 25) - 1;
char c;
int bit_get(const int &v, int i, int j) {
	return (v >> (i * 5 + j)) & 1;
}
void bit_set(int &v, int i, int j) {
	v |= (1 << (i * 5 + j));
}
void bit_flip(int &v, int i, int j) {
	v ^= (1 << (i * 5 + j));
}
void change(int &v, int i, int j) {
	bit_flip(v, i, j);
	if (i > 0) bit_flip(v, i - 1, j);
	if (i < 4) bit_flip(v, i + 1, j);
	if (j > 0) bit_flip(v, i, j - 1);
	if (j < 4) bit_flip(v, i, j + 1);	
}
int main() {
	scanf("%d", &n);
	while (n--) { // 500
		int state = 0;
		for (int i = 0; i < 5; ++i) {
			for (int j = 0; j < 5; ++j) {
				cin >> c;
				if (c == '1') bit_set(state, i, j);
			}
		}
		int tot = 1 << 5, minSteps = INT_MAX;
		for (int i = 0; i < tot; ++i) { // [0,31]
			int tmpState = state, steps = 0;
			// 改变第0行
			for (int j = 0; j < 5; ++j) {
				if ((i >> j) & 1) {
					change(tmpState, 0, j);
					++steps;
				}
			}
			for (int j = 1; j < 5; ++j) { // 从第1行到第4行
				for (int k = 0; k < 5; ++k) { // 该行的5列
					if (!bit_get(tmpState, j - 1, k)) { // 上一行该列为0
						change(tmpState, j, k);
						++steps;
					}
				}
			}
			if (tmpState == finalState)
				minSteps = min(minSteps, steps);
		}
		printf("%d\n", (minSteps <= 6) ? minSteps : -1);
	}
	return 0;
}
//500
//01000
//01110
//10111
//10110
//11000
//
//01001
//00011
//10001
//10000
//11110
//
//01010
//01010
//00001
//01101
//01000
//
//00011
//11110
//00100
//10100
//01001
//
//00000
//10000
//11010
//00001
//00001
//
//01110
//01111
//01111
//01111
//01000
//
//11001
//10010
//00010
//10100
//11000
//
//11001
//11100
//01000
//01110
//10010
//
//10100
//01010
//01010
//11100
//00010
//
//11000
//00011
//11011
//00011
//01010
//
//10111
//11010
//01011
//00000
//01001
//
//00010
//01100
//11011
//00100
//11110
//
//00001
//11100
//11000
//11010
//00001
//
//11110
//11000
//11001
//00000
//11000
//
//11001
//00010
//11011
//10110
//00010
//
//11001
//10111
//01110
//01000
//10000
//
//10111
//00110
//00011
//11101
//00110
//
//00111
//01011
//11100
//11011
//00100
//
//11001
//11111
//00010
//11001
//11000
//
//10111
//01110
//01000
//00100
//11000
//
//10100
//00011
//11010
//01001
//00000
//
//00011
//11110
//00000
//01010
//10101
//
//10101
//11001
//11011
//01010
//01010
//
//00010
//01110
//11101
//00011
//00111
//
//11110
//10000
//01011
//01111
//01000
//
//11000
//11000
//01110
//00000
//01101
//
//01101
//10101
//11111
//01100
//01101
//
//11110
//11101
//10110
//01110
//01111
//
//11000
//01101
//00011
//10100
//01110
//
//11011
//10001
//01110
//01111
//11100
//
//10010
//00011
//00111
//01000
//10011
//
//10110
//11000
//10101
//01001
//01010
//
//11101
//01001
//00010
//10000
//10101
//
//00000
//00011
//00010
//00110
//10110
//
//11111
//01011
//01111
//11011
//10011
//
//10111
//00001
//00000
//00101
//01111
//
//00110
//00010
//01011
//00110
//11011
//
//11100
//00000
//00111
//01000
//10001
//
//01010
//11001
//01101
//01100
//11000
//
//00101
//00000
//00111
//10011
//01111
//
//11111
//11101
//00011
//11110
//11100
//
//11000
//00110
//10110
//10001
//01110
//
//11011
//00100
//01100
//01001
//10011
//
//11011
//01101
//11110
//10101
//10001
//
//00110
//11011
//00010
//10010
//00010
//
//00111
//01011
//10000
//11101
//10011
//
//11111
//11110
//10010
//01101
//11111
//
//11110
//01110
//10011
//01011
//00001
//
//01001
//10010
//00110
//01111
//10011
//
//00011
//11111
//11100
//10001
//11011
//
//01010
//00101
//00001
//10110
//01111
//
//01110
//01001
//11111
//10100
//00111
//
//11000
//11000
//01011
//00101
//10011
//
//00010
//10000
//11110
//11101
//11111
//
//01111
//00111
//01100
//10111
//01110
//
//10011
//11001
//01010
//11100
//11110
//
//11101
//11000
//11101
//11011
//10001
//
//11011
//10011
//11111
//01011
//11111
//
//11101
//01001
//01001
//11111
//11101
